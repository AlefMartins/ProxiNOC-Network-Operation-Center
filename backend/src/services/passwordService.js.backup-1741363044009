const sequelize = require("../config/sequelize")
const bcrypt = require("bcrypt")
const { User } = require("../models")
const ldapService = require("./ldapService") // Restaurando a importação do ldapService

/**
 * Serviço para gerenciamento de senhas
 */
const passwordService = {
  /**
   * Altera a senha do usuário logado
   * @param {number} userId - ID do usuário
   * @param {string} newPassword - Nova senha
   * @returns {Promise<Object>} Resultado da operação
   */
  async changePassword(userId, newPassword) {
    try {
      // Buscar usuário
      const user = await User.findByPk(userId)

      if (!user) {
        return {
          success: false,
          message: "Usuário não encontrado",
        }
      }

      console.log(`Alterando senha para usuário ${user.username} (LDAP: ${user.isLdapUser})`)

      // Verificar se é usuário LDAP
      if (user.isLdapUser) {
        console.log(`Usuário ${user.username} é LDAP, alterando senha no LDAP...`)

        // Alterar senha no LDAP
        const ldapResult = await ldapService.changePasswordLoggedUser(user.username, newPassword)

        if (!ldapResult.success) {
          console.error(`Erro ao alterar senha no LDAP para ${user.username}: ${ldapResult.message}`)
          return ldapResult
        }

        console.log(`Senha alterada com sucesso no LDAP para ${user.username}`)
        return ldapResult
      }

      // Se não for LDAP, alterar senha localmente
      console.log(`Alterando senha local para ${user.username}`)

      // Gerar hash da senha usando bcrypt
      console.log(`Gerando hash da senha para ${user.username}`)
      const hashedPassword = await bcrypt.hash(newPassword, 10)
      console.log(`Hash gerado: ${hashedPassword.substring(0, 20)}...`)

      // Atualizar apenas o campo password
      console.log(`Atualizando senha no banco de dados para ${user.username}`)
      await user.update(
        {
          password: hashedPassword,
        },
        {
          fields: ["password"],
        },
      )

      // Verificar se a senha foi atualizada corretamente
      const updatedUser = await User.findByPk(userId)
      console.log(`Senha atualizada: ${updatedUser.password.substring(0, 20)}...`)

      // Verificar se a nova senha funciona
      console.log(`Verificando se a nova senha funciona para ${user.username}`)
      const passwordMatch = await bcrypt.compare(newPassword, updatedUser.password)
      console.log(`Resultado da verificação: ${passwordMatch}`)

      if (!passwordMatch) {
        console.error(`ERRO: A nova senha não funciona para ${user.username}!`)
        return {
          success: false,
          message: "Erro ao verificar a nova senha",
        }
      }

      console.log(`Senha alterada com sucesso para ${user.username}`)
      return {
        success: true,
        message: "Senha alterada com sucesso",
      }
    } catch (error) {
      console.error("Erro ao alterar senha:", error)
      return {
        success: false,
        message: "Erro ao alterar senha",
      }
    }
  },

  /**
   * Valida a complexidade da senha
   * @param {string} password - Senha a ser validada
   * @returns {Object} Resultado da validação
   */
  validatePasswordComplexity(password) {
    // Verificar tamanho mínimo
    if (password.length < 8) {
      return {
        valid: false,
        message: "A senha deve ter pelo menos 8 caracteres",
      }
    }

    // Verificar se contém pelo menos um número
    if (!/\d/.test(password)) {
      return {
        valid: false,
        message: "A senha deve conter pelo menos um número",
      }
    }

    // Verificar se contém pelo menos uma letra maiúscula
    if (!/[A-Z]/.test(password)) {
      return {
        valid: false,
        message: "A senha deve conter pelo menos uma letra maiúscula",
      }
    }

    // Verificar se contém pelo menos uma letra minúscula
    if (!/[a-z]/.test(password)) {
      return {
        valid: false,
        message: "A senha deve conter pelo menos uma letra minúscula",
      }
    }

    // Verificar se contém pelo menos um caractere especial
    if (!/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password)) {
      return {
        valid: false,
        message: "A senha deve conter pelo menos um caractere especial",
      }
    }

    return {
      valid: true,
      message: "Senha válida",
    }
  },
}

module.exports = passwordService

